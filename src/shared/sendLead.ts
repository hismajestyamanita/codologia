// src/shared/sendLead.ts
interface LeadPayload {
  name?: string;
  parentName?: string;
  childName?: string;
  phone: string;
  age?: string;
  program?: string;
  message?: string;
  preferredDate?: string;
  preferredTime?: string;
  source?: string; // hero-modal | lead-form | signup-modal | unified-signup-modal | quiz-form | question-modal
}

function getFormType(source?: string) {
  switch ((source || '').toLowerCase()) {
    case 'hero-modal':
    case 'lead-form':              return '–§–æ—Ä–º–∞ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞';
    case 'signup-modal':           return '–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ (–∫–Ω–æ–ø–∫–∞)';
    case 'unified-signup-modal':   return '–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ (–∫–Ω–æ–ø–∫–∞/–∫–∞—Ä—Ç–æ—á–∫–∞)';
    case 'quiz-form':              return '–ö–≤–∏–∑ ‚Äî –ø–æ–¥–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã';
    case 'question-modal':         return '–§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞';
    default:                       return '–õ–∏–¥ —Å —Å–∞–π—Ç–∞';
  }
}

export default async function sendLead(data: LeadPayload) {
  const lines: string[] = [];
  const typeLabel = getFormType(data.source);

  lines.push(`üì© <b>${typeLabel}</b>\n`);

  const displayName = data.parentName || data.name;
  if (displayName)     lines.push(`üë§ –ò–º—è: ${escapeHtml(displayName)}`);
  if (data.childName)  lines.push(`üßí –†–µ–±—ë–Ω–æ–∫: ${escapeHtml(data.childName)}`); // <= –ö–†–ò–¢–ò–ß–ù–û
  if (data.age)        lines.push(`üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${escapeHtml(data.age)}`);
  if (data.program)    lines.push(`üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${escapeHtml(data.program)}`);
  lines.push(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone ? escapeHtml(data.phone) : '‚Äî'}`);
  if (data.preferredDate) lines.push(`üìÖ –î–∞—Ç–∞: ${escapeHtml(data.preferredDate)}`);
  if (data.preferredTime) lines.push(`‚è∞ –í—Ä–µ–º—è: ${escapeHtml(data.preferredTime)}`);
  if (data.message)       lines.push(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${escapeHtml(data.message)}`);

  const payload = { ...data, text: lines.join('\n') }; // <= –ö–†–ò–¢–ò–ß–ù–û

  // –í–†–ï–ú–ï–ù–ù–´–ô –õ–û–ì –ù–ê –§–†–û–ù–¢–ï: —É–≤–∏–¥–∏—à—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —É—Ö–æ–¥–∏—Ç
  console.log('sendLead payload:', payload);

  try {
    const res = await fetch('/.netlify/functions/notify-telegram', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
    const json = await res.json().catch(() => ({}));
    return Boolean(json?.ok);
  } catch (e) {
    console.error('sendLead error:', e);
    return false;
  }
}

function escapeHtml(s: string) {
  return String(s).replace(/[&<>"']/g, (c) => ({
    '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;',
  }[c] || c));
}
