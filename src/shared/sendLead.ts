// src/shared/sendLead.ts

interface LeadPayload {
  name?: string;          // –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ)
  parentName?: string;    // –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è (–Ω–æ–≤–æ–µ –ø–æ–ª–µ)
  childName?: string;     // –∏–º—è —Ä–µ–±—ë–Ω–∫–∞
  phone: string;          // —Ç–µ–ª–µ—Ñ–æ–Ω
  age?: string;           // –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞
  program?: string;       // –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–¥–ª—è –∫–≤–∏–∑–∞ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º)
  message?: string;       // —Å–æ–æ–±—â–µ–Ω–∏–µ / –¥–ª—è –∫–≤–∏–∑–∞ ‚Äî —Å–≤–æ–¥–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
  preferredDate?: string; // –∂–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  preferredTime?: string; // –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
  source?: string;        // hero-modal | lead-form | signup-modal | unified-signup-modal | quiz-form | question-modal | ...
}

function getFormType(source?: string) {
  switch ((source || '').toLowerCase()) {
    case 'hero-modal':
    case 'lead-form':
      return '–§–æ—Ä–º–∞ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞';
    case 'signup-modal':
      return '–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ (–∫–Ω–æ–ø–∫–∞)';
    case 'unified-signup-modal':
      return '–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ (–∫–Ω–æ–ø–∫–∞/–∫–∞—Ä—Ç–æ—á–∫–∞)';
    case 'quiz-form':
      return '–ö–≤–∏–∑ ‚Äî –ø–æ–¥–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã';
    case 'question-modal':
      return '–§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞';
    default:
      return '–õ–∏–¥ —Å —Å–∞–π—Ç–∞';
  }
}

export default async function sendLead(data: LeadPayload) {
  const lines: string[] = [];

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  const typeLabel = getFormType(data.source);
  lines.push(`üì© <b>${typeLabel}</b>\n`);

  // –ò–º—è
  const displayName = data.parentName || data.name;
  if (displayName) lines.push(`üë§ –ò–º—è: ${escapeHtml(displayName)}`);

  // –†–µ–±—ë–Ω–æ–∫ / –í–æ–∑—Ä–∞—Å—Ç
  if (data.childName) lines.push(`üßí –†–µ–±—ë–Ω–æ–∫: ${escapeHtml(data.childName)}`);
  if (data.age)       lines.push(`üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${escapeHtml(data.age)}`);

  // –ü—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äî –ù–ï –ø–µ—á–∞—Ç–∞–µ–º –¥–ª—è –∫–≤–∏–∑–∞
  if ((data.source || '').toLowerCase() !== 'quiz-form' && data.program) {
    lines.push(`üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${escapeHtml(data.program)}`);
  }

  // –¢–µ–ª–µ—Ñ–æ–Ω
  lines.push(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone ? escapeHtml(data.phone) : '‚Äî'}`);

  // –î–∞—Ç–∞ / –í—Ä–µ–º—è
  if (data.preferredDate) lines.push(`üìÖ –î–∞—Ç–∞: ${escapeHtml(data.preferredDate)}`);
  if (data.preferredTime) lines.push(`‚è∞ –í—Ä–µ–º—è: ${escapeHtml(data.preferredTime)}`);

  // –°–æ–æ–±—â–µ–Ω–∏–µ:
  // - –¥–ª—è –∫–≤–∏–∑–∞ –ø–µ—á–∞—Ç–∞–µ–º –∫–∞–∫ –±–ª–æ–∫ ¬´–û—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞¬ª
  // - –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ‚Äî –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (data.message) {
    if ((data.source || '').toLowerCase() === 'quiz-form') {
      lines.push(`üß© –û—Ç–≤–µ—Ç—ã –∫–≤–∏–∑–∞:\n${escapeMultiline(data.message)}`);
    } else {
      lines.push(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${escapeMultiline(data.message)}`);
    }
  }

  const payload = { ...data, text: lines.join('\n') };

  try {
    const res = await fetch('/.netlify/functions/notify-telegram', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
    const json = await res.json().catch(() => ({}));
    return Boolean(json?.ok);
  } catch (e) {
    console.error('sendLead error:', e);
    return false;
  }
}

// –≠–∫—Ä–∞–Ω–∏–º HTML
function escapeHtml(s: string) {
  return String(s).replace(/[&<>"']/g, (c) => ({
    '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;',
  }[c] || c));
}

// –≠–∫—Ä–∞–Ω–∏–º HTML + —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
function escapeMultiline(s: string) {
  return escapeHtml(s).replace(/\r?\n/g, '\n');
}
