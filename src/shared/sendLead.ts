// src/shared/sendLead.ts

interface LeadPayload {
  name?: string;        // –æ–±—â–µ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä QuestionModal)
  parentName?: string;  // –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è
  childName?: string;   // –∏–º—è —Ä–µ–±–µ–Ω–∫–∞
  phone: string;        // —Ç–µ–ª–µ—Ñ–æ–Ω
  age?: string;         // –≤–æ–∑—Ä–∞—Å—Ç
  program?: string;     // –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
  message?: string;     // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç/–≤–æ–ø—Ä–æ—Å
  preferredDate?: string;
  preferredTime?: string;
  source?: string;      // –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –ª–∏–¥ (signup-modal, lead-form –∏ —Ç–¥)
}

export default async function sendLead(data: LeadPayload) {
  const lines: string[] = [];

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –ø–æ source, –µ—Å–ª–∏ –µ—Å—Ç—å
  let typeLabel = "–õ–∏–¥";
  switch (data.source) {
    case "lead-form":
      typeLabel = "–õ–∏–¥ —Ñ–æ—Ä–º–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞";
      break;
    case "signup-modal":
      typeLabel = "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–ø–∏—Å–∏";
      break;
    case "unified-signup-modal":
      typeLabel = "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏";
      break;
    case "question-modal":
      typeLabel = "–§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞";
      break;
    default:
      typeLabel = "–õ–∏–¥";
  }

  lines.push(`üì© <b>${typeLabel}</b>\n`);

  if (data.parentName) lines.push(`üë§ –†–æ–¥–∏—Ç–µ–ª—å: ${escapeHtml(data.parentName)}`);
  if (data.name) lines.push(`üë§ –ò–º—è: ${escapeHtml(data.name)}`);
  if (data.childName) lines.push(`üßí –†–µ–±–µ–Ω–æ–∫: ${escapeHtml(data.childName)}`);
  if (data.age) lines.push(`üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${escapeHtml(data.age)}`);
  if (data.program) lines.push(`üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${escapeHtml(data.program)}`);
  lines.push(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone ? escapeHtml(data.phone) : "‚Äî"}`);
  if (data.preferredDate) lines.push(`üìÖ –î–∞—Ç–∞: ${escapeHtml(data.preferredDate)}`);
  if (data.preferredTime) lines.push(`‚è∞ –í—Ä–µ–º—è: ${escapeHtml(data.preferredTime)}`);
  if (data.message) lines.push(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${escapeHtml(data.message)}`);

  const body = { ...data, text: lines.join("\n") };

  try {
    const res = await fetch("/.netlify/functions/notify-telegram", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });

    const json = await res.json().catch(() => ({}));
    return json.ok;
  } catch (err) {
    console.error("sendLead error:", err);
    return false;
  }
}

// --- helper –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç HTML-–∏–Ω—ä–µ–∫—Ü–∏–π ---
function escapeHtml(s: string) {
  return String(s).replace(/[&<>"']/g, (c) => {
    return (
      {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
      }[c] || c
    );
  });
}
