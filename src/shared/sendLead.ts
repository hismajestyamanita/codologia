// src/shared/sendLead.ts

interface LeadPayload {
  name?: string;          // –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  parentName?: string;    // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è
  childName?: string;
  phone: string;
  age?: string;           // –≤–æ–∑—Ä–∞—Å—Ç
  program?: string;       // –ø—Ä–æ–≥—Ä–∞–º–º–∞ / "–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ" / "–ö–≤–∏–∑ - ..."
  message?: string;
  preferredDate?: string;
  preferredTime?: string;
  source?: string;        // hero-modal | lead-form | signup-modal | unified-signup-modal | quiz-form | question-modal | ...
}

function getFormType(source?: string) {
  switch ((source || '').toLowerCase()) {
    case 'hero-modal':
    case 'lead-form':
      return '–§–æ—Ä–º–∞ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞';
    case 'signup-modal':
      return '–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ (–∫–Ω–æ–ø–∫–∞)';
    case 'unified-signup-modal':
      // –≠—Ç–∞ –º–æ–¥–∞–ª–∫–∞ —É —Ç–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏ —Å –∫–∞—Ä—Ç–æ—á–µ–∫, –∏ —Å —Ö–µ–¥–µ—Ä–∞/–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
      return '–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ (–∫–Ω–æ–ø–∫–∞/–∫–∞—Ä—Ç–æ—á–∫–∞)';
    case 'quiz-form':
      return '–ö–≤–∏–∑ ‚Äî –ø–æ–¥–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã';
    case 'question-modal':
      return '–§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞';
    default:
      return '–õ–∏–¥ —Å —Å–∞–π—Ç–∞';
  }
}

export default async function sendLead(data: LeadPayload) {
  const lines: string[] = [];
  const typeLabel = getFormType(data.source);

  lines.push(`üì© <b>${typeLabel}</b>\n`);

  // –ò–º—è: –±–µ—Ä—ë–º —Å–∞–º–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ
  const displayName = data.parentName || data.name;
  if (displayName) lines.push(`üë§ –ò–º—è: ${escapeHtml(displayName)}`);

  if (data.childName)  lines.push(`üßí –†–µ–±—ë–Ω–æ–∫: ${escapeHtml(data.childName)}`);
  if (data.age)        lines.push(`üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${escapeHtml(data.age)}`);
  if (data.program)    lines.push(`üìö –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${escapeHtml(data.program)}`);

  lines.push(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone ? escapeHtml(data.phone) : '‚Äî'}`);

  if (data.preferredDate) lines.push(`üìÖ –î–∞—Ç–∞: ${escapeHtml(data.preferredDate)}`);
  if (data.preferredTime) lines.push(`‚è∞ –í—Ä–µ–º—è: ${escapeHtml(data.preferredTime)}`);
  if (data.message)       lines.push(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${escapeHtml(data.message)}`);

  const payload = { ...data, text: lines.join('\n') };

  try {
    const res = await fetch('/.netlify/functions/notify-telegram', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });
    const json = await res.json().catch(() => ({}));
    return Boolean(json?.ok);
  } catch (e) {
    console.error('sendLead error:', e);
    return false;
  }
}

// HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
function escapeHtml(s: string) {
  return String(s).replace(/[&<>"']/g, (c) => ({
    '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;',
  }[c] || c));
}
